{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","config.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","map","message","components_Message","key","id","sender","name","parts","payload","content","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","preventDefault","sendMessage","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","room","active","onClick","subscribeToRoom","href","NewRoomForm","roomName","createRoom","required","tokenProvider","TokenProvider","url","chatManager","ChatManager","instanceLocator","userId","App","joinableRooms","joinedRooms","getRooms","_this2","connect","then","currentUser","catch","error","console","_this3","getJoinableRooms","err","log","_this4","subscribeToRoomMultipart","hooks","onMessage","concat","_this5","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2ef16a1d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Message(props) {\r\n\treturn (\r\n        <div className=\"message\">\r\n            <div className=\"message-username\">{props.username}</div>\r\n            <div className=\"message-text\">{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Message from './Message'\r\n\r\nclass MessageList extends React.Component {\r\n\r\n\r\n    componentWillUpdate() {\r\n        const node = ReactDOM.findDOMNode(this)\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight >= node.scrollHeight\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        if (this.shouldScrollToBottom) {\r\n            const node = ReactDOM.findDOMNode(this)\r\n            node.scrollTop = node.scrollHeight   \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.roomId) {\r\n            return (\r\n                <div className=\"message-list\">\r\n                    <div className=\"join-room\">\r\n                        &larr; Join a room!\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"message-list\">\r\n\r\n                {this.props.messages.map((message) => {\r\n                    return (\r\n                        <Message \r\n                            key={message.id} \r\n                            username={message.sender.name} \r\n                            text={message.parts[0].payload.content}\r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageList","import React from 'react'\r\n\r\nclass SendMessageForm extends React.Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tmessage: ''\r\n\t\t}\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this)\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this)\r\n\t}\r\n\r\n\thandleChange(event){\r\n\t\tthis.setState({\r\n\t\t\tmessage: event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\thandleSubmit(event){\r\n\t\tevent.preventDefault()\r\n\t\tthis.props.sendMessage(this.state.message)\r\n\t\tthis.setState({\r\n\t\t\tmessage:''\r\n\t\t})\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"send-message-form\" onSubmit={this.handleSubmit}>\r\n                <input\r\n                \tdisabled={this.props.roomId ? false : true}\r\n                \tonChange={this.handleChange}\r\n                \tvalue={this.state.message}\r\n                    placeholder={this.props.roomId ? \"Type your message and hit ENTER\" : \"Please Select a room to starting the chat\" }\r\n                    type=\"text\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SendMessageForm","import React from 'react'\r\n\r\nclass RoomList extends React.Component {\r\n    render () {\r\n    \tconst orderedRooms = [...this.props.rooms].sort((a, b) => a.id - b.id)\r\n        return (\r\n            <div className=\"rooms-list\">\r\n                <ul>\r\n                <h3>Your rooms:</h3>\r\n                    {orderedRooms.map(room => {\r\n                    \tconst active = this.props.roomId === room.id ? \"active\" : \"\"\r\n                        return (\r\n                            <li key={room.id} className={\"room \"+active}>\r\n                                <a \r\n                                \tonClick={() => this.props.subscribeToRoom(room.id) } \r\n                               \t\thref=\"#\">\r\n                                \t# {room.name}\r\n                                </a>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RoomList","import React from 'react'\r\n\r\nclass NewRoomForm extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            roomName: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    \r\n    handleChange(event) {\r\n        this.setState({\r\n            roomName: event.target.value\r\n        })\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        this.props.createRoom(this.state.roomName)\r\n        this.setState({\r\n            roomName: ''\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"new-room-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        onChange={this.handleChange}\r\n                        type=\"text\" \r\n                        placeholder=\"Create a room\" \r\n                        value={this.state.roomName}\r\n                        required />\r\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewRoomForm","import { ChatManager, TokenProvider } from '@pusher/chatkit-client'\r\n\r\nconst tokenProvider = new TokenProvider({\r\n  url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/aaa66a0f-fb99-4e6e-8e41-b6d995198cd0/token\"\r\n});\r\n\r\nconst chatManager = new ChatManager({\r\n  instanceLocator: \"v1:us1:aaa66a0f-fb99-4e6e-8e41-b6d995198cd0\",\r\n  userId: \"reactjsph\", \r\n  tokenProvider: tokenProvider\r\n});\r\n\r\n\r\nexport { chatManager }","import React from 'react'\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\nimport RoomList from './components/RoomList'\nimport NewRoomForm from './components/NewRoomForm'\n\nimport { chatManager } from './config'\n\nimport './App.css';\n\n\nclass App extends React.Component {\n\n    constructor(){\n      super()\n      this.state = {\n        roomId: null,\n        messages: [],\n        joinableRooms: [],\n        joinedRooms: []\n      }  \n\n      this.sendMessage = this.sendMessage.bind(this)\n      this.subscribeToRoom = this.subscribeToRoom.bind(this)\n      this.getRooms = this.getRooms.bind(this)\n      this.createRoom = this.createRoom.bind(this)\n    }\n    \n    componentDidMount() {\n        chatManager.connect()\n        .then(currentUser => {\n            this.currentUser = currentUser\n\n            this.getRooms()\n        })\n        .catch(error => {\n            console.error(\"error:\", error);\n        })\n    }\n\n    getRooms(){\n        this.currentUser.getJoinableRooms()\n        .then(joinableRooms => {\n            this.setState({\n                joinableRooms,\n                joinedRooms: this.currentUser.rooms\n            })\n        })\n        .catch(err => console.log('error on joinableRooms: ', err))\n    }\n\n\n    subscribeToRoom(roomId){\n        this.setState({ messages: [] })\n        this.currentUser.subscribeToRoomMultipart({\n          roomId: roomId,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message]\n              });\n            }\n          },\n        })\n        .then(room => {\n            this.setState({\n              roomId: room.id\n            });\n            this.getRooms()\n        })\n        .catch(err => console.log('error on subscribing to room: ', err))\n    }\n\n\n    sendMessage(text){\n      this.currentUser.sendMessage({\n        text,\n        roomId: this.state.roomId\n      })\n    }\n\n\n    createRoom(name) {\n        this.currentUser.createRoom({\n            name\n        })\n        .then(room => this.subscribeToRoom(room.id))\n        .catch(err => console.log('error with createRoom: ', err))\n    }\n    \n    render() {\n        return (\n            <div className=\"app\">\n                <RoomList \n                  roomId={this.state.roomId}\n                  subscribeToRoom={this.subscribeToRoom} \n                  rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}/>\n\n                <MessageList messages={this.state.messages} roomId={this.state.roomId}/>\n                <SendMessageForm sendMessage={this.sendMessage} roomId={this.state.roomId} />\n                <NewRoomForm createRoom={this.createRoom}/>\n            </div>\n        );\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}